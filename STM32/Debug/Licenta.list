
Licenta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c84  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001d94  08001d94  00011d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001dc0  08001dc0  00011dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001dc4  08001dc4  00011dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08001dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000064  20000014  08001ddc  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000078  08001ddc  00020078  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005389  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000012e3  00000000  00000000  000253c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005c0  00000000  00000000  000266b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f8  00000000  00000000  00026c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000022eb  00000000  00000000  00027168  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001cb7  00000000  00000000  00029453  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002b10a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001784  00000000  00000000  0002b188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08001d7c 	.word	0x08001d7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08001d7c 	.word	0x08001d7c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__aeabi_d2iz>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ec:	d215      	bcs.n	800091a <__aeabi_d2iz+0x36>
 80008ee:	d511      	bpl.n	8000914 <__aeabi_d2iz+0x30>
 80008f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f8:	d912      	bls.n	8000920 <__aeabi_d2iz+0x3c>
 80008fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000906:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	bf18      	it	ne
 8000910:	4240      	negne	r0, r0
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d105      	bne.n	800092c <__aeabi_d2iz+0x48>
 8000920:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000924:	bf08      	it	eq
 8000926:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000934:	b480      	push	{r7}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	78db      	ldrb	r3, [r3, #3]
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	78db      	ldrb	r3, [r3, #3]
 8000964:	f003 0310 	and.w	r3, r3, #16
 8000968:	2b00      	cmp	r3, #0
 800096a:	d005      	beq.n	8000978 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	789b      	ldrb	r3, [r3, #2]
 8000970:	461a      	mov	r2, r3
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	4313      	orrs	r3, r2
 8000976:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b00      	cmp	r3, #0
 8000980:	d044      	beq.n	8000a0c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000988:	2300      	movs	r3, #0
 800098a:	61bb      	str	r3, [r7, #24]
 800098c:	e038      	b.n	8000a00 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800098e:	2201      	movs	r2, #1
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	4013      	ands	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d126      	bne.n	80009fa <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80009b2:	220f      	movs	r2, #15
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	43db      	mvns	r3, r3
 80009c0:	697a      	ldr	r2, [r7, #20]
 80009c2:	4013      	ands	r3, r2
 80009c4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80009c6:	69fa      	ldr	r2, [r7, #28]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	78db      	ldrb	r3, [r3, #3]
 80009d8:	2b28      	cmp	r3, #40	; 0x28
 80009da:	d105      	bne.n	80009e8 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80009dc:	2201      	movs	r2, #1
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	409a      	lsls	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	615a      	str	r2, [r3, #20]
 80009e6:	e008      	b.n	80009fa <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	78db      	ldrb	r3, [r3, #3]
 80009ec:	2b48      	cmp	r3, #72	; 0x48
 80009ee:	d104      	bne.n	80009fa <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80009f0:	2201      	movs	r2, #1
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	409a      	lsls	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	3301      	adds	r3, #1
 80009fe:	61bb      	str	r3, [r7, #24]
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	2b07      	cmp	r3, #7
 8000a04:	d9c3      	bls.n	800098e <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	2bff      	cmp	r3, #255	; 0xff
 8000a12:	d946      	bls.n	8000aa2 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
 8000a1e:	e03a      	b.n	8000a96 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	3308      	adds	r3, #8
 8000a24:	2201      	movs	r2, #1
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d127      	bne.n	8000a90 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000a46:	220f      	movs	r2, #15
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	4013      	ands	r3, r2
 8000a58:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a5a:	69fa      	ldr	r2, [r7, #28]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	78db      	ldrb	r3, [r3, #3]
 8000a6c:	2b28      	cmp	r3, #40	; 0x28
 8000a6e:	d105      	bne.n	8000a7c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	3308      	adds	r3, #8
 8000a74:	2201      	movs	r2, #1
 8000a76:	409a      	lsls	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	78db      	ldrb	r3, [r3, #3]
 8000a80:	2b48      	cmp	r3, #72	; 0x48
 8000a82:	d105      	bne.n	8000a90 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	3308      	adds	r3, #8
 8000a88:	2201      	movs	r2, #1
 8000a8a:	409a      	lsls	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	3301      	adds	r3, #1
 8000a94:	61bb      	str	r3, [r7, #24]
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	2b07      	cmp	r3, #7
 8000a9a:	d9c1      	bls.n	8000a20 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	697a      	ldr	r2, [r7, #20]
 8000aa0:	605a      	str	r2, [r3, #4]
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3724      	adds	r7, #36	; 0x24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aba:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2202      	movs	r2, #2
 8000ac0:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	70da      	strb	r2, [r3, #3]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	460b      	mov	r3, r1
 8000adc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000ade:	887a      	ldrh	r2, [r7, #2]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	611a      	str	r2, [r3, #16]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr

08000aee <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	460b      	mov	r3, r1
 8000af8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000afa:	887a      	ldrh	r2, [r7, #2]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	615a      	str	r2, [r3, #20]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
	...

08000b0c <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b087      	sub	sp, #28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	da03      	bge.n	8000b36 <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8000b2e:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <GPIO_PinRemapConfig+0xdc>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	e002      	b.n	8000b3c <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8000b36:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <GPIO_PinRemapConfig+0xdc>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	0c1b      	lsrs	r3, r3, #16
 8000b40:	f003 030f 	and.w	r3, r3, #15
 8000b44:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000b52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000b56:	d10a      	bne.n	8000b6e <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000b5e:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000b60:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <GPIO_PinRemapConfig+0xdc>)
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <GPIO_PinRemapConfig+0xdc>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000b6a:	6053      	str	r3, [r2, #4]
 8000b6c:	e021      	b.n	8000bb2 <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d00e      	beq.n	8000b96 <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000b78:	2203      	movs	r2, #3
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e00d      	b.n	8000bb2 <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	0d5b      	lsrs	r3, r3, #21
 8000b9a:	011b      	lsls	r3, r3, #4
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000bb0:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8000bb2:	78fb      	ldrb	r3, [r7, #3]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d008      	beq.n	8000bca <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	0d5b      	lsrs	r3, r3, #21
 8000bbc:	011b      	lsls	r3, r3, #4
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	da03      	bge.n	8000bd8 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8000bd0:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <GPIO_PinRemapConfig+0xdc>)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 8000bd6:	e002      	b.n	8000bde <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 8000bd8:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <GPIO_PinRemapConfig+0xdc>)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	6053      	str	r3, [r2, #4]
}
 8000bde:	bf00      	nop
 8000be0:	371c      	adds	r7, #28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	40010000 	.word	0x40010000

08000bec <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b087      	sub	sp, #28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000c04:	4b4c      	ldr	r3, [pc, #304]	; (8000d38 <RCC_GetClocksFreq+0x14c>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 030c 	and.w	r3, r3, #12
 8000c0c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d007      	beq.n	8000c24 <RCC_GetClocksFreq+0x38>
 8000c14:	2b08      	cmp	r3, #8
 8000c16:	d009      	beq.n	8000c2c <RCC_GetClocksFreq+0x40>
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d133      	bne.n	8000c84 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a47      	ldr	r2, [pc, #284]	; (8000d3c <RCC_GetClocksFreq+0x150>)
 8000c20:	601a      	str	r2, [r3, #0]
      break;
 8000c22:	e033      	b.n	8000c8c <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a45      	ldr	r2, [pc, #276]	; (8000d3c <RCC_GetClocksFreq+0x150>)
 8000c28:	601a      	str	r2, [r3, #0]
      break;
 8000c2a:	e02f      	b.n	8000c8c <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000c2c:	4b42      	ldr	r3, [pc, #264]	; (8000d38 <RCC_GetClocksFreq+0x14c>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000c34:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000c36:	4b40      	ldr	r3, [pc, #256]	; (8000d38 <RCC_GetClocksFreq+0x14c>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c3e:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	0c9b      	lsrs	r3, r3, #18
 8000c44:	3302      	adds	r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d106      	bne.n	8000c5c <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4a3b      	ldr	r2, [pc, #236]	; (8000d40 <RCC_GetClocksFreq+0x154>)
 8000c52:	fb02 f203 	mul.w	r2, r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000c5a:	e017      	b.n	8000c8c <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000c5c:	4b36      	ldr	r3, [pc, #216]	; (8000d38 <RCC_GetClocksFreq+0x14c>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d006      	beq.n	8000c76 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	4a35      	ldr	r2, [pc, #212]	; (8000d40 <RCC_GetClocksFreq+0x154>)
 8000c6c:	fb02 f203 	mul.w	r2, r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	601a      	str	r2, [r3, #0]
      break;
 8000c74:	e00a      	b.n	8000c8c <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	4a30      	ldr	r2, [pc, #192]	; (8000d3c <RCC_GetClocksFreq+0x150>)
 8000c7a:	fb02 f203 	mul.w	r2, r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	601a      	str	r2, [r3, #0]
      break;
 8000c82:	e003      	b.n	8000c8c <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a2d      	ldr	r2, [pc, #180]	; (8000d3c <RCC_GetClocksFreq+0x150>)
 8000c88:	601a      	str	r2, [r3, #0]
      break;
 8000c8a:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000c8c:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <RCC_GetClocksFreq+0x14c>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c94:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	091b      	lsrs	r3, r3, #4
 8000c9a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000c9c:	4a29      	ldr	r2, [pc, #164]	; (8000d44 <RCC_GetClocksFreq+0x158>)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	40da      	lsrs	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <RCC_GetClocksFreq+0x14c>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000cbc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000cc4:	4a1f      	ldr	r2, [pc, #124]	; (8000d44 <RCC_GetClocksFreq+0x158>)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	40da      	lsrs	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <RCC_GetClocksFreq+0x14c>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000ce4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	0adb      	lsrs	r3, r3, #11
 8000cea:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000cec:	4a15      	ldr	r2, [pc, #84]	; (8000d44 <RCC_GetClocksFreq+0x158>)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	40da      	lsrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <RCC_GetClocksFreq+0x14c>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d0c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	0b9b      	lsrs	r3, r3, #14
 8000d12:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000d14:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <RCC_GetClocksFreq+0x15c>)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	611a      	str	r2, [r3, #16]
}
 8000d2e:	bf00      	nop
 8000d30:	371c      	adds	r7, #28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	007a1200 	.word	0x007a1200
 8000d40:	003d0900 	.word	0x003d0900
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000010 	.word	0x20000010

08000d4c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d58:	78fb      	ldrb	r3, [r7, #3]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d006      	beq.n	8000d6c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000d5e:	4909      	ldr	r1, [pc, #36]	; (8000d84 <RCC_APB2PeriphClockCmd+0x38>)
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <RCC_APB2PeriphClockCmd+0x38>)
 8000d62:	699a      	ldr	r2, [r3, #24]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000d6a:	e006      	b.n	8000d7a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000d6c:	4905      	ldr	r1, [pc, #20]	; (8000d84 <RCC_APB2PeriphClockCmd+0x38>)
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <RCC_APB2PeriphClockCmd+0x38>)
 8000d70:	699a      	ldr	r2, [r3, #24]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	4013      	ands	r3, r2
 8000d78:	618b      	str	r3, [r1, #24]
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40021000 	.word	0x40021000

08000d88 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d006      	beq.n	8000da8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000d9a:	4909      	ldr	r1, [pc, #36]	; (8000dc0 <RCC_APB1PeriphClockCmd+0x38>)
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <RCC_APB1PeriphClockCmd+0x38>)
 8000d9e:	69da      	ldr	r2, [r3, #28]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000da6:	e006      	b.n	8000db6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000da8:	4905      	ldr	r1, [pc, #20]	; (8000dc0 <RCC_APB1PeriphClockCmd+0x38>)
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <RCC_APB1PeriphClockCmd+0x38>)
 8000dac:	69da      	ldr	r2, [r3, #28]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	4013      	ands	r3, r2
 8000db4:	61cb      	str	r3, [r1, #28]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	887a      	ldrh	r2, [r7, #2]
 8000dd4:	819a      	strh	r2, [r3, #12]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	899b      	ldrh	r3, [r3, #12]
 8000dec:	b29b      	uxth	r3, r3
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	891b      	ldrh	r3, [r3, #8]
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	887b      	ldrh	r3, [r7, #2]
 8000e10:	4013      	ands	r3, r2
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]
 8000e1c:	e001      	b.n	8000e22 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
	...

08000e30 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	; 0x30
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	8a1b      	ldrh	r3, [r3, #16]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e5c:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000e60:	4013      	ands	r3, r2
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	88db      	ldrh	r3, [r3, #6]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	899b      	ldrh	r3, [r3, #12]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e82:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000e86:	4013      	ands	r3, r2
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	889a      	ldrh	r2, [r3, #4]
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	891b      	ldrh	r3, [r3, #8]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	8a9b      	ldrh	r3, [r3, #20]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eb8:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	899b      	ldrh	r3, [r3, #12]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fe87 	bl	8000bec <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	4a2e      	ldr	r2, [pc, #184]	; (8000f9c <USART_Init+0x16c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d102      	bne.n	8000eec <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eea:	e001      	b.n	8000ef0 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	899b      	ldrh	r3, [r3, #12]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b21b      	sxth	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	da0c      	bge.n	8000f16 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000efc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000efe:	4613      	mov	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	009a      	lsls	r2, r3, #2
 8000f06:	441a      	add	r2, r3
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
 8000f14:	e00b      	b.n	8000f2e <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f18:	4613      	mov	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	009a      	lsls	r2, r3, #2
 8000f20:	441a      	add	r2, r3
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <USART_Init+0x170>)
 8000f32:	fba2 2303 	umull	r2, r3, r2, r3
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	011b      	lsls	r3, r3, #4
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3e:	091b      	lsrs	r3, r3, #4
 8000f40:	2264      	movs	r2, #100	; 0x64
 8000f42:	fb02 f303 	mul.w	r3, r2, r3
 8000f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	899b      	ldrh	r3, [r3, #12]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	da0c      	bge.n	8000f72 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	3332      	adds	r3, #50	; 0x32
 8000f5e:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <USART_Init+0x170>)
 8000f60:	fba2 2303 	umull	r2, r3, r2, r3
 8000f64:	095b      	lsrs	r3, r3, #5
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f70:	e00b      	b.n	8000f8a <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000f72:	6a3b      	ldr	r3, [r7, #32]
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	3332      	adds	r3, #50	; 0x32
 8000f78:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <USART_Init+0x170>)
 8000f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	f003 030f 	and.w	r3, r3, #15
 8000f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f86:	4313      	orrs	r3, r2
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	811a      	strh	r2, [r3, #8]
}
 8000f92:	bf00      	nop
 8000f94:	3730      	adds	r7, #48	; 0x30
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40013800 	.word	0x40013800
 8000fa0:	51eb851f 	.word	0x51eb851f

08000fa4 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fb2:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	220c      	movs	r2, #12
 8000fca:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	819a      	strh	r2, [r3, #12]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d008      	beq.n	8001000 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	899b      	ldrh	r3, [r3, #12]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000ffe:	e007      	b.n	8001010 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	899b      	ldrh	r3, [r3, #12]
 8001004:	b29b      	uxth	r3, r3
 8001006:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800100a:	b29a      	uxth	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	819a      	strh	r2, [r3, #12]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800102c:	b29a      	uxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	809a      	strh	r2, [r3, #4]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	b29a      	uxth	r2, r3
 8001052:	887b      	ldrh	r3, [r7, #2]
 8001054:	4013      	ands	r3, r2
 8001056:	b29b      	uxth	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e001      	b.n	8001066 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <gyroRead>:

/**
 * Update the Gyro values
 */
void gyroRead(int16_t readValues[])
{
 8001072:	b5b0      	push	{r4, r5, r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
    beginTransmission();
 800107a:	f000 fae5 	bl	8001648 <beginTransmission>
    transmitByte(0x80u | 0x22u); // Read OUTX_L_G
 800107e:	20a2      	movs	r0, #162	; 0xa2
 8001080:	f000 fb04 	bl	800168c <transmitByte>
    readValues[0]  = transmitByte(0x00u) | transmitByte(0x00u) << 8u; //gyroX
 8001084:	2000      	movs	r0, #0
 8001086:	f000 fb01 	bl	800168c <transmitByte>
 800108a:	4603      	mov	r3, r0
 800108c:	b21c      	sxth	r4, r3
 800108e:	2000      	movs	r0, #0
 8001090:	f000 fafc 	bl	800168c <transmitByte>
 8001094:	4603      	mov	r3, r0
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b21b      	sxth	r3, r3
 800109a:	4323      	orrs	r3, r4
 800109c:	b21a      	sxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	801a      	strh	r2, [r3, #0]
    readValues[1]  = transmitByte(0x00u) | transmitByte(0x00u) << 8u; //gyroY
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	1c9c      	adds	r4, r3, #2
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 faf0 	bl	800168c <transmitByte>
 80010ac:	4603      	mov	r3, r0
 80010ae:	b21d      	sxth	r5, r3
 80010b0:	2000      	movs	r0, #0
 80010b2:	f000 faeb 	bl	800168c <transmitByte>
 80010b6:	4603      	mov	r3, r0
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	432b      	orrs	r3, r5
 80010be:	b21b      	sxth	r3, r3
 80010c0:	8023      	strh	r3, [r4, #0]
    readValues[2]  = transmitByte(0x00u) | transmitByte(0x00u) << 8u; //gyroZ
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	1d1c      	adds	r4, r3, #4
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 fae0 	bl	800168c <transmitByte>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b21d      	sxth	r5, r3
 80010d0:	2000      	movs	r0, #0
 80010d2:	f000 fadb 	bl	800168c <transmitByte>
 80010d6:	4603      	mov	r3, r0
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21b      	sxth	r3, r3
 80010dc:	432b      	orrs	r3, r5
 80010de:	b21b      	sxth	r3, r3
 80010e0:	8023      	strh	r3, [r4, #0]
    readValues[3]  = transmitByte(0x00u) | transmitByte(0x00u) << 8u; //accelX
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	1d9c      	adds	r4, r3, #6
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 fad0 	bl	800168c <transmitByte>
 80010ec:	4603      	mov	r3, r0
 80010ee:	b21d      	sxth	r5, r3
 80010f0:	2000      	movs	r0, #0
 80010f2:	f000 facb 	bl	800168c <transmitByte>
 80010f6:	4603      	mov	r3, r0
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	432b      	orrs	r3, r5
 80010fe:	b21b      	sxth	r3, r3
 8001100:	8023      	strh	r3, [r4, #0]
    readValues[4]  = transmitByte(0x00u) | transmitByte(0x00u) << 8u; //accelY
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f103 0408 	add.w	r4, r3, #8
 8001108:	2000      	movs	r0, #0
 800110a:	f000 fabf 	bl	800168c <transmitByte>
 800110e:	4603      	mov	r3, r0
 8001110:	b21d      	sxth	r5, r3
 8001112:	2000      	movs	r0, #0
 8001114:	f000 faba 	bl	800168c <transmitByte>
 8001118:	4603      	mov	r3, r0
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21b      	sxth	r3, r3
 800111e:	432b      	orrs	r3, r5
 8001120:	b21b      	sxth	r3, r3
 8001122:	8023      	strh	r3, [r4, #0]
    readValues[5]  = transmitByte(0x00u) | transmitByte(0x00u) << 8u; //accelZ
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f103 040a 	add.w	r4, r3, #10
 800112a:	2000      	movs	r0, #0
 800112c:	f000 faae 	bl	800168c <transmitByte>
 8001130:	4603      	mov	r3, r0
 8001132:	b21d      	sxth	r5, r3
 8001134:	2000      	movs	r0, #0
 8001136:	f000 faa9 	bl	800168c <transmitByte>
 800113a:	4603      	mov	r3, r0
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b21b      	sxth	r3, r3
 8001140:	432b      	orrs	r3, r5
 8001142:	b21b      	sxth	r3, r3
 8001144:	8023      	strh	r3, [r4, #0]
    endTransmission();
 8001146:	f000 fa8b 	bl	8001660 <endTransmission>

    readValues[0] = readValues[0] - GYRO_OFFSET_X;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	801a      	strh	r2, [r3, #0]
    readValues[1] = readValues[1] - GYRO_OFFSET_Y;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3302      	adds	r3, #2
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800115e:	801a      	strh	r2, [r3, #0]
    readValues[2] = readValues[2] - GYRO_OFFSET_Z;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3304      	adds	r3, #4
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800116a:	801a      	strh	r2, [r3, #0]

}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bdb0      	pop	{r4, r5, r7, pc}

08001174 <initClocks>:
#include <stdint.h>

volatile uint32_t global_timer;

void initClocks(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8001178:	2101      	movs	r1, #1
 800117a:	2004      	movs	r0, #4
 800117c:	f7ff fde6 	bl	8000d4c <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001180:	2101      	movs	r1, #1
 8001182:	2008      	movs	r0, #8
 8001184:	f7ff fde2 	bl	8000d4c <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8001188:	2101      	movs	r1, #1
 800118a:	2010      	movs	r0, #16
 800118c:	f7ff fdde 	bl	8000d4c <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8001190:	2101      	movs	r1, #1
 8001192:	2020      	movs	r0, #32
 8001194:	f7ff fdda 	bl	8000d4c <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8001198:	2101      	movs	r1, #1
 800119a:	2040      	movs	r0, #64	; 0x40
 800119c:	f7ff fdd6 	bl	8000d4c <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,  ENABLE);
 80011a0:	2101      	movs	r1, #1
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7ff fdd2 	bl	8000d4c <RCC_APB2PeriphClockCmd>

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80011a8:	2101      	movs	r1, #1
 80011aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80011ae:	f7ff fdcd 	bl	8000d4c <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 80011b2:	2101      	movs	r1, #1
 80011b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80011b8:	f7ff fde6 	bl	8000d88 <RCC_APB1PeriphClockCmd>

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80011bc:	2101      	movs	r1, #1
 80011be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80011c2:	f7ff fdc3 	bl	8000d4c <RCC_APB2PeriphClockCmd>
    GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE);
 80011c6:	2101      	movs	r1, #1
 80011c8:	2004      	movs	r0, #4
 80011ca:	f7ff fc9f 	bl	8000b0c <GPIO_PinRemapConfig>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <delay_ms>:

void delay_ms(uint32_t delay)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
    uint32_t elapsed;
    uint32_t start = global_timer;
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <delay_ms+0x2c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	60fb      	str	r3, [r7, #12]
    do {
        elapsed = global_timer - start;
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <delay_ms+0x2c>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	60bb      	str	r3, [r7, #8]
    } while (elapsed < delay) ;
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d3f6      	bcc.n	80011e2 <delay_ms+0xe>
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000064 	.word	0x20000064
 8001204:	00000000 	.word	0x00000000

08001208 <main>:
*/
int16_t extremitati(int16_t val[]);
int16_t filtrareValoriMediiX(int16_t variabila);
int16_t filtrareValoriMediiY(int16_t variabila);
int main(void)
{	initClocks();
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b08d      	sub	sp, #52	; 0x34
 800120c:	af00      	add	r7, sp, #0
 800120e:	f7ff ffb1 	bl	8001174 <initClocks>
	initUart();
 8001212:	f000 fd27 	bl	8001c64 <initUart>
  //  initGyro();

    //delay_ms(10000); //10ms
    printf("mihai");
 8001216:	48b8      	ldr	r0, [pc, #736]	; (80014f8 <main+0x2f0>)
 8001218:	f000 fcda 	bl	8001bd0 <iprintf>
    //char timp[50];


    while(1){

    	gyroRead(gyroValues);
 800121c:	463b      	mov	r3, r7
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff27 	bl	8001072 <gyroRead>
        for(int i = 0 ; i <3; i++){
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001228:	e062      	b.n	80012f0 <main+0xe8>

    		if(gyroValues[i+3] > -11 && gyroValues[i+3] < 11)	gyroValues[i+3] = 0;
 800122a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122c:	3303      	adds	r3, #3
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001234:	4413      	add	r3, r2
 8001236:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 800123a:	f113 0f0a 	cmn.w	r3, #10
 800123e:	db12      	blt.n	8001266 <main+0x5e>
 8001240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001242:	3303      	adds	r3, #3
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800124a:	4413      	add	r3, r2
 800124c:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8001250:	2b0a      	cmp	r3, #10
 8001252:	dc08      	bgt.n	8001266 <main+0x5e>
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	3303      	adds	r3, #3
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800125e:	4413      	add	r3, r2
 8001260:	2200      	movs	r2, #0
 8001262:	f823 2c30 	strh.w	r2, [r3, #-48]
    		if(gyroValues[i+3] > 4140)  gyroValues[i+3] = 4100;
 8001266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001268:	3303      	adds	r3, #3
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001270:	4413      	add	r3, r2
 8001272:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8001276:	f241 022c 	movw	r2, #4140	; 0x102c
 800127a:	4293      	cmp	r3, r2
 800127c:	dd09      	ble.n	8001292 <main+0x8a>
 800127e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001280:	3303      	adds	r3, #3
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001288:	4413      	add	r3, r2
 800128a:	f241 0204 	movw	r2, #4100	; 0x1004
 800128e:	f823 2c30 	strh.w	r2, [r3, #-48]
    		if(gyroValues[i+3] < -4140)	gyroValues[i+3] = -4100;
 8001292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001294:	3303      	adds	r3, #3
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800129c:	4413      	add	r3, r2
 800129e:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80012a2:	4a96      	ldr	r2, [pc, #600]	; (80014fc <main+0x2f4>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	da09      	bge.n	80012bc <main+0xb4>
 80012a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012aa:	3303      	adds	r3, #3
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80012b2:	4413      	add	r3, r2
 80012b4:	f64e 72fc 	movw	r2, #61436	; 0xeffc
 80012b8:	f823 2c30 	strh.w	r2, [r3, #-48]

    		poz[i] = gyroValues[i+3] / 23;
 80012bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012be:	3303      	adds	r3, #3
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80012c6:	4413      	add	r3, r2
 80012c8:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80012cc:	4a8c      	ldr	r2, [pc, #560]	; (8001500 <main+0x2f8>)
 80012ce:	fb82 1203 	smull	r1, r2, r2, r3
 80012d2:	441a      	add	r2, r3
 80012d4:	1112      	asrs	r2, r2, #4
 80012d6:	17db      	asrs	r3, r3, #31
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	b21a      	sxth	r2, r3
 80012dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80012e4:	440b      	add	r3, r1
 80012e6:	f823 2c20 	strh.w	r2, [r3, #-32]
        for(int i = 0 ; i <3; i++){
 80012ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ec:	3301      	adds	r3, #1
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	dd99      	ble.n	800122a <main+0x22>

    	}
    	 //RESTRICTIONAREA PENTRU 360* PE AXA OY

    	    		if(poz[1] > 0 && poz [2] > 0){
 80012f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	dd0e      	ble.n	800131c <main+0x114>
 80012fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001302:	2b00      	cmp	r3, #0
 8001304:	dd0a      	ble.n	800131c <main+0x114>
    	    			int temp = poz[1];
 8001306:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800130a:	623b      	str	r3, [r7, #32]
    	    			poz[1] = -temp / 2;
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	425b      	negs	r3, r3
 8001310:	0fda      	lsrs	r2, r3, #31
 8001312:	4413      	add	r3, r2
 8001314:	105b      	asrs	r3, r3, #1
 8001316:	b21b      	sxth	r3, r3
 8001318:	827b      	strh	r3, [r7, #18]
    	    		if(poz[1] > 0 && poz [2] > 0){
 800131a:	e039      	b.n	8001390 <main+0x188>
    	    		}

    	    		else if(poz[1] > 0 && poz [2] < 0){
 800131c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001320:	2b00      	cmp	r3, #0
 8001322:	dd0f      	ble.n	8001344 <main+0x13c>
 8001324:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001328:	2b00      	cmp	r3, #0
 800132a:	da0b      	bge.n	8001344 <main+0x13c>
    	    				poz[1] = -(90 + (90 - poz[1]/2));
 800132c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001330:	0fda      	lsrs	r2, r3, #31
 8001332:	4413      	add	r3, r2
 8001334:	105b      	asrs	r3, r3, #1
 8001336:	b21b      	sxth	r3, r3
 8001338:	b29b      	uxth	r3, r3
 800133a:	3bb4      	subs	r3, #180	; 0xb4
 800133c:	b29b      	uxth	r3, r3
 800133e:	b21b      	sxth	r3, r3
 8001340:	827b      	strh	r3, [r7, #18]
 8001342:	e025      	b.n	8001390 <main+0x188>
    	    			}
    	    		else if(poz[1] < 0 && poz [2] < 0){
 8001344:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001348:	2b00      	cmp	r3, #0
 800134a:	da0f      	bge.n	800136c <main+0x164>
 800134c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001350:	2b00      	cmp	r3, #0
 8001352:	da0b      	bge.n	800136c <main+0x164>
    	    		    				poz[1] = (90 + (90 + poz[1]/2));
 8001354:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001358:	0fda      	lsrs	r2, r3, #31
 800135a:	4413      	add	r3, r2
 800135c:	105b      	asrs	r3, r3, #1
 800135e:	b21b      	sxth	r3, r3
 8001360:	b29b      	uxth	r3, r3
 8001362:	33b4      	adds	r3, #180	; 0xb4
 8001364:	b29b      	uxth	r3, r3
 8001366:	b21b      	sxth	r3, r3
 8001368:	827b      	strh	r3, [r7, #18]
 800136a:	e011      	b.n	8001390 <main+0x188>
    	    		}
    	    		else if(poz[1] < 0 && poz [2] > 0)
 800136c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001370:	2b00      	cmp	r3, #0
 8001372:	da0d      	bge.n	8001390 <main+0x188>
 8001374:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001378:	2b00      	cmp	r3, #0
 800137a:	dd09      	ble.n	8001390 <main+0x188>
    					{ int temp = poz[1];
 800137c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001380:	61fb      	str	r3, [r7, #28]
    	    			poz[1] = -temp/2;}
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	425b      	negs	r3, r3
 8001386:	0fda      	lsrs	r2, r3, #31
 8001388:	4413      	add	r3, r2
 800138a:	105b      	asrs	r3, r3, #1
 800138c:	b21b      	sxth	r3, r3
 800138e:	827b      	strh	r3, [r7, #18]

   //RESTRICTIONAREA PENTRU 360* PE AXA OX

					if(poz[0] > 0 && poz [2] > 0){
 8001390:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001394:	2b00      	cmp	r3, #0
 8001396:	dd0e      	ble.n	80013b6 <main+0x1ae>
 8001398:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800139c:	2b00      	cmp	r3, #0
 800139e:	dd0a      	ble.n	80013b6 <main+0x1ae>
						int temp = poz[0];
 80013a0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013a4:	61bb      	str	r3, [r7, #24]
						poz[0] = -temp / 2;
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	425b      	negs	r3, r3
 80013aa:	0fda      	lsrs	r2, r3, #31
 80013ac:	4413      	add	r3, r2
 80013ae:	105b      	asrs	r3, r3, #1
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	823b      	strh	r3, [r7, #16]
					if(poz[0] > 0 && poz [2] > 0){
 80013b4:	e039      	b.n	800142a <main+0x222>
					}

					else if(poz[0] > 0 && poz [2] < 0){
 80013b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	dd0f      	ble.n	80013de <main+0x1d6>
 80013be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da0b      	bge.n	80013de <main+0x1d6>
								poz[0] = -(90 + (90 - poz[0]/2));
 80013c6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013ca:	0fda      	lsrs	r2, r3, #31
 80013cc:	4413      	add	r3, r2
 80013ce:	105b      	asrs	r3, r3, #1
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	3bb4      	subs	r3, #180	; 0xb4
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	823b      	strh	r3, [r7, #16]
 80013dc:	e025      	b.n	800142a <main+0x222>
							}
					else if(poz[0] < 0 && poz [2] < 0){
 80013de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	da0f      	bge.n	8001406 <main+0x1fe>
 80013e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	da0b      	bge.n	8001406 <main+0x1fe>
										poz[0] = (90 + (90 + poz[0]/2));
 80013ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013f2:	0fda      	lsrs	r2, r3, #31
 80013f4:	4413      	add	r3, r2
 80013f6:	105b      	asrs	r3, r3, #1
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	33b4      	adds	r3, #180	; 0xb4
 80013fe:	b29b      	uxth	r3, r3
 8001400:	b21b      	sxth	r3, r3
 8001402:	823b      	strh	r3, [r7, #16]
 8001404:	e011      	b.n	800142a <main+0x222>

					}
					else if(poz[0] < 0 && poz [2] > 0)
 8001406:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800140a:	2b00      	cmp	r3, #0
 800140c:	da0d      	bge.n	800142a <main+0x222>
 800140e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001412:	2b00      	cmp	r3, #0
 8001414:	dd09      	ble.n	800142a <main+0x222>
						{ int temp = poz[0];
 8001416:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800141a:	617b      	str	r3, [r7, #20]
						poz[0] = -temp/2;}
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	425b      	negs	r3, r3
 8001420:	0fda      	lsrs	r2, r3, #31
 8001422:	4413      	add	r3, r2
 8001424:	105b      	asrs	r3, r3, #1
 8001426:	b21b      	sxth	r3, r3
 8001428:	823b      	strh	r3, [r7, #16]
    //Configurare Acceleratie
    	  for(int j = 0; j< 2;j++)
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
 800142e:	e020      	b.n	8001472 <main+0x26a>
    	  acc[j] = gyroValues[j] * 0.00244; //    m/(s^2)
 8001430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001438:	4413      	add	r3, r2
 800143a:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe ffd8 	bl	80003f4 <__aeabi_i2d>
 8001444:	a32a      	add	r3, pc, #168	; (adr r3, 80014f0 <main+0x2e8>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f839 	bl	80004c0 <__aeabi_dmul>
 800144e:	4603      	mov	r3, r0
 8001450:	460c      	mov	r4, r1
 8001452:	4618      	mov	r0, r3
 8001454:	4621      	mov	r1, r4
 8001456:	f7ff fa45 	bl	80008e4 <__aeabi_d2iz>
 800145a:	4603      	mov	r3, r0
 800145c:	b21a      	sxth	r2, r3
 800145e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001466:	440b      	add	r3, r1
 8001468:	f823 2c24 	strh.w	r2, [r3, #-36]
    	  for(int j = 0; j< 2;j++)
 800146c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146e:	3301      	adds	r3, #1
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
 8001472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001474:	2b01      	cmp	r3, #1
 8001476:	dddb      	ble.n	8001430 <main+0x228>

    	  for(int i = 0 ;i<5;i++)
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
 800147c:	e010      	b.n	80014a0 <main+0x298>
    	  {		poz[0] = filtrareValoriMediiX(poz[0]);
 800147e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f846 	bl	8001514 <filtrareValoriMediiX>
 8001488:	4603      	mov	r3, r0
 800148a:	823b      	strh	r3, [r7, #16]
    	  		val[i] = poz[0];}
 800148c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001490:	4619      	mov	r1, r3
 8001492:	4a1c      	ldr	r2, [pc, #112]	; (8001504 <main+0x2fc>)
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	  for(int i = 0 ;i<5;i++)
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	3301      	adds	r3, #1
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	ddeb      	ble.n	800147e <main+0x276>

    	 // printf("%d %d %d %d %d ",val[0],val[1],val[2],val[3],val[4]);
    	// poz[0] = extremitati(val);
    	//  printf("    %d    ",poz[0]);
    	  poz[1] = filtrareValoriMediiY(poz[1]);
 80014a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f874 	bl	8001598 <filtrareValoriMediiY>
 80014b0:	4603      	mov	r3, r0
 80014b2:	827b      	strh	r3, [r7, #18]

// Print doar pozitii
    	//printf("X= %d,Y= %d,Z= %d\n", poz[0] , poz[1],poz[2] );

// Print pozitii si accelerari
    	printf("Mihai");
 80014b4:	4814      	ldr	r0, [pc, #80]	; (8001508 <main+0x300>)
 80014b6:	f000 fb8b 	bl	8001bd0 <iprintf>

    	printf("%d %d ", acc[0], acc[1]);
 80014ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014be:	4619      	mov	r1, r3
 80014c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4811      	ldr	r0, [pc, #68]	; (800150c <main+0x304>)
 80014c8:	f000 fb82 	bl	8001bd0 <iprintf>
    	delay_ms(2000);  // ------> desi scrie dealy milisec inseamna delay micro sec deci pt o sec ai nevoie de 1 000 000
 80014cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014d0:	f7ff fe80 	bl	80011d4 <delay_ms>
    	printf("X= %d,Y= %d,Z= %d\n" , poz[0],poz[1],poz[2]);
 80014d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80014d8:	4619      	mov	r1, r3
 80014da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014de:	461a      	mov	r2, r3
 80014e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014e4:	480a      	ldr	r0, [pc, #40]	; (8001510 <main+0x308>)
 80014e6:	f000 fb73 	bl	8001bd0 <iprintf>
    	gyroRead(gyroValues);
 80014ea:	e697      	b.n	800121c <main+0x14>
 80014ec:	f3af 8000 	nop.w
 80014f0:	0678c005 	.word	0x0678c005
 80014f4:	3f63fd0d 	.word	0x3f63fd0d
 80014f8:	08001d94 	.word	0x08001d94
 80014fc:	ffffefd4 	.word	0xffffefd4
 8001500:	b21642c9 	.word	0xb21642c9
 8001504:	20000068 	.word	0x20000068
 8001508:	08001d9c 	.word	0x08001d9c
 800150c:	08001da4 	.word	0x08001da4
 8001510:	08001dac 	.word	0x08001dac

08001514 <filtrareValoriMediiX>:
    }


}

int16_t filtrareValoriMediiX(int16_t variabila){
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	80fb      	strh	r3, [r7, #6]
	int iesire;



	varx5 = varx4;
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <filtrareValoriMediiX+0x6c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a18      	ldr	r2, [pc, #96]	; (8001584 <filtrareValoriMediiX+0x70>)
 8001524:	6013      	str	r3, [r2, #0]
	varx4 = varx3;
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <filtrareValoriMediiX+0x74>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a15      	ldr	r2, [pc, #84]	; (8001580 <filtrareValoriMediiX+0x6c>)
 800152c:	6013      	str	r3, [r2, #0]
	varx3 = varx2;
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <filtrareValoriMediiX+0x78>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a15      	ldr	r2, [pc, #84]	; (8001588 <filtrareValoriMediiX+0x74>)
 8001534:	6013      	str	r3, [r2, #0]
	varx2 = varx1;
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <filtrareValoriMediiX+0x7c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a14      	ldr	r2, [pc, #80]	; (800158c <filtrareValoriMediiX+0x78>)
 800153c:	6013      	str	r3, [r2, #0]
	varx1 = variabila;
 800153e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001542:	4a13      	ldr	r2, [pc, #76]	; (8001590 <filtrareValoriMediiX+0x7c>)
 8001544:	6013      	str	r3, [r2, #0]


	iesire = (varx1+varx2+varx3+varx4+varx5)/5;
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <filtrareValoriMediiX+0x7c>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <filtrareValoriMediiX+0x78>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	441a      	add	r2, r3
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <filtrareValoriMediiX+0x74>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	441a      	add	r2, r3
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <filtrareValoriMediiX+0x6c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	441a      	add	r2, r3
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <filtrareValoriMediiX+0x70>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4413      	add	r3, r2
 8001562:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <filtrareValoriMediiX+0x80>)
 8001564:	fb82 1203 	smull	r1, r2, r2, r3
 8001568:	1052      	asrs	r2, r2, #1
 800156a:	17db      	asrs	r3, r3, #31
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	60fb      	str	r3, [r7, #12]

    //printf("%d %d %d %d %d ", varx1, varx2, varx3, varx4, varx5);
	return iesire;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	b21b      	sxth	r3, r3
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	2000005c 	.word	0x2000005c
 8001584:	20000060 	.word	0x20000060
 8001588:	20000058 	.word	0x20000058
 800158c:	20000054 	.word	0x20000054
 8001590:	20000050 	.word	0x20000050
 8001594:	66666667 	.word	0x66666667

08001598 <filtrareValoriMediiY>:
int16_t filtrareValoriMediiY(int16_t variabila){
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
	int iesire;



	var8 = var7;
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <filtrareValoriMediiY+0x90>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a21      	ldr	r2, [pc, #132]	; (800162c <filtrareValoriMediiY+0x94>)
 80015a8:	6013      	str	r3, [r2, #0]
	var7 = var6;
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <filtrareValoriMediiY+0x98>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <filtrareValoriMediiY+0x90>)
 80015b0:	6013      	str	r3, [r2, #0]
	var6 = var5;
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <filtrareValoriMediiY+0x9c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <filtrareValoriMediiY+0x98>)
 80015b8:	6013      	str	r3, [r2, #0]
	var5 = var4;
 80015ba:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <filtrareValoriMediiY+0xa0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a1d      	ldr	r2, [pc, #116]	; (8001634 <filtrareValoriMediiY+0x9c>)
 80015c0:	6013      	str	r3, [r2, #0]
	var4 = var3;
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <filtrareValoriMediiY+0xa4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <filtrareValoriMediiY+0xa0>)
 80015c8:	6013      	str	r3, [r2, #0]
	var3 = var2;
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <filtrareValoriMediiY+0xa8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a1b      	ldr	r2, [pc, #108]	; (800163c <filtrareValoriMediiY+0xa4>)
 80015d0:	6013      	str	r3, [r2, #0]
	var2 = var1;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <filtrareValoriMediiY+0xac>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a1a      	ldr	r2, [pc, #104]	; (8001640 <filtrareValoriMediiY+0xa8>)
 80015d8:	6013      	str	r3, [r2, #0]
	var1 = variabila;
 80015da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015de:	4a19      	ldr	r2, [pc, #100]	; (8001644 <filtrareValoriMediiY+0xac>)
 80015e0:	6013      	str	r3, [r2, #0]



	iesire = (var1+var2+var3+var4+var5+var6+var7+var8)/8;
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <filtrareValoriMediiY+0xac>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <filtrareValoriMediiY+0xa8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	441a      	add	r2, r3
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <filtrareValoriMediiY+0xa4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	441a      	add	r2, r3
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <filtrareValoriMediiY+0xa0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	441a      	add	r2, r3
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <filtrareValoriMediiY+0x9c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	441a      	add	r2, r3
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <filtrareValoriMediiY+0x98>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	441a      	add	r2, r3
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <filtrareValoriMediiY+0x90>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	441a      	add	r2, r3
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <filtrareValoriMediiY+0x94>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	2b00      	cmp	r3, #0
 8001612:	da00      	bge.n	8001616 <filtrareValoriMediiY+0x7e>
 8001614:	3307      	adds	r3, #7
 8001616:	10db      	asrs	r3, r3, #3
 8001618:	60fb      	str	r3, [r7, #12]

	return iesire;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	b21b      	sxth	r3, r3
}
 800161e:	4618      	mov	r0, r3
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	20000048 	.word	0x20000048
 800162c:	2000004c 	.word	0x2000004c
 8001630:	20000044 	.word	0x20000044
 8001634:	20000040 	.word	0x20000040
 8001638:	2000003c 	.word	0x2000003c
 800163c:	20000038 	.word	0x20000038
 8001640:	20000034 	.word	0x20000034
 8001644:	20000030 	.word	0x20000030

08001648 <beginTransmission>:
#include <spi.h>


void beginTransmission(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
    GYRO_SPI_ASSERT_CS();
 800164c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <beginTransmission+0x14>)
 8001652:	f7ff fa4c 	bl	8000aee <GPIO_ResetBits>
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40010c00 	.word	0x40010c00

08001660 <endTransmission>:

void endTransmission(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
    while(SPI_I2S_GetFlagStatus(GYRO_SPI, SPI_I2S_FLAG_BSY) == SET);
 8001664:	bf00      	nop
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	4806      	ldr	r0, [pc, #24]	; (8001684 <endTransmission+0x24>)
 800166a:	f7ff fbc5 	bl	8000df8 <SPI_I2S_GetFlagStatus>
 800166e:	4603      	mov	r3, r0
 8001670:	2b01      	cmp	r3, #1
 8001672:	d0f8      	beq.n	8001666 <endTransmission+0x6>
    GYRO_SPI_DEASSERT_CS(); // End transmission
 8001674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001678:	4803      	ldr	r0, [pc, #12]	; (8001688 <endTransmission+0x28>)
 800167a:	f7ff fa2a 	bl	8000ad2 <GPIO_SetBits>
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40003800 	.word	0x40003800
 8001688:	40010c00 	.word	0x40010c00

0800168c <transmitByte>:

uint8_t transmitByte(uint8_t data)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
    /* Send byte through the SPI peripheral */
    SPI_I2S_SendData(GYRO_SPI, data);
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	b29b      	uxth	r3, r3
 800169a:	4619      	mov	r1, r3
 800169c:	4809      	ldr	r0, [pc, #36]	; (80016c4 <transmitByte+0x38>)
 800169e:	f7ff fb91 	bl	8000dc4 <SPI_I2S_SendData>

    /* Wait to receive a byte */
    while (SPI_I2S_GetFlagStatus(GYRO_SPI, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 80016a2:	bf00      	nop
 80016a4:	2101      	movs	r1, #1
 80016a6:	4807      	ldr	r0, [pc, #28]	; (80016c4 <transmitByte+0x38>)
 80016a8:	f7ff fba6 	bl	8000df8 <SPI_I2S_GetFlagStatus>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f8      	beq.n	80016a4 <transmitByte+0x18>

    /* Return the byte read from the SPI bus */
    return SPI_I2S_ReceiveData(GYRO_SPI);
 80016b2:	4804      	ldr	r0, [pc, #16]	; (80016c4 <transmitByte+0x38>)
 80016b4:	f7ff fb94 	bl	8000de0 <SPI_I2S_ReceiveData>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b2db      	uxtb	r3, r3
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40003800 	.word	0x40003800

080016c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001700 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016ce:	e003      	b.n	80016d8 <LoopCopyDataInit>

080016d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80016d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016d6:	3104      	adds	r1, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016d8:	480b      	ldr	r0, [pc, #44]	; (8001708 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80016dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016e0:	d3f6      	bcc.n	80016d0 <CopyDataInit>
	ldr	r2, =_sbss
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80016e4:	e002      	b.n	80016ec <LoopFillZerobss>

080016e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016e8:	f842 3b04 	str.w	r3, [r2], #4

080016ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80016ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016f0:	d3f9      	bcc.n	80016e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016f2:	f000 f83d 	bl	8001770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f6:	f000 fb1d 	bl	8001d34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016fa:	f7ff fd85 	bl	8001208 <main>
	bx	lr
 80016fe:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001700:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001704:	08001dc8 	.word	0x08001dc8
	ldr	r0, =_sdata
 8001708:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800170c:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8001710:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8001714:	20000078 	.word	0x20000078

08001718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC1_2_IRQHandler>

0800171a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001730:	e7fe      	b.n	8001730 <MemManage_Handler+0x4>

08001732 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001736:	e7fe      	b.n	8001736 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler+0x4>

0800173e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
	...

08001770 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001774:	4a15      	ldr	r2, [pc, #84]	; (80017cc <SystemInit+0x5c>)
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <SystemInit+0x5c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001780:	4912      	ldr	r1, [pc, #72]	; (80017cc <SystemInit+0x5c>)
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <SystemInit+0x5c>)
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <SystemInit+0x60>)
 8001788:	4013      	ands	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800178c:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <SystemInit+0x5c>)
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <SystemInit+0x5c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800179c:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <SystemInit+0x5c>)
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <SystemInit+0x5c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80017a8:	4a08      	ldr	r2, [pc, #32]	; (80017cc <SystemInit+0x5c>)
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <SystemInit+0x5c>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80017b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <SystemInit+0x5c>)
 80017b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80017ba:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80017bc:	f000 f80c 	bl	80017d8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <SystemInit+0x64>)
 80017c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000
 80017d0:	f8ff0000 	.word	0xf8ff0000
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80017dc:	f000 f802 	bl	80017e4 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	2300      	movs	r3, #0
 80017f0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80017f2:	4a3a      	ldr	r2, [pc, #232]	; (80018dc <SetSysClockTo72+0xf8>)
 80017f4:	4b39      	ldr	r3, [pc, #228]	; (80018dc <SetSysClockTo72+0xf8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80017fe:	4b37      	ldr	r3, [pc, #220]	; (80018dc <SetSysClockTo72+0xf8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3301      	adds	r3, #1
 800180c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d103      	bne.n	800181c <SetSysClockTo72+0x38>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800181a:	d1f0      	bne.n	80017fe <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800181c:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <SetSysClockTo72+0xf8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001828:	2301      	movs	r3, #1
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	e001      	b.n	8001832 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d14b      	bne.n	80018d0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001838:	4a29      	ldr	r2, [pc, #164]	; (80018e0 <SetSysClockTo72+0xfc>)
 800183a:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <SetSysClockTo72+0xfc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f043 0310 	orr.w	r3, r3, #16
 8001842:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001844:	4a26      	ldr	r2, [pc, #152]	; (80018e0 <SetSysClockTo72+0xfc>)
 8001846:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <SetSysClockTo72+0xfc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 0303 	bic.w	r3, r3, #3
 800184e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001850:	4a23      	ldr	r2, [pc, #140]	; (80018e0 <SetSysClockTo72+0xfc>)
 8001852:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <SetSysClockTo72+0xfc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f043 0302 	orr.w	r3, r3, #2
 800185a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800185c:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <SetSysClockTo72+0xf8>)
 800185e:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <SetSysClockTo72+0xf8>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001864:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <SetSysClockTo72+0xf8>)
 8001866:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <SetSysClockTo72+0xf8>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800186c:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <SetSysClockTo72+0xf8>)
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <SetSysClockTo72+0xf8>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001876:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001878:	4a18      	ldr	r2, [pc, #96]	; (80018dc <SetSysClockTo72+0xf8>)
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <SetSysClockTo72+0xf8>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001882:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001884:	4a15      	ldr	r2, [pc, #84]	; (80018dc <SetSysClockTo72+0xf8>)
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <SetSysClockTo72+0xf8>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800188e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <SetSysClockTo72+0xf8>)
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <SetSysClockTo72+0xf8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800189c:	bf00      	nop
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <SetSysClockTo72+0xf8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f9      	beq.n	800189e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80018aa:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <SetSysClockTo72+0xf8>)
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <SetSysClockTo72+0xf8>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f023 0303 	bic.w	r3, r3, #3
 80018b4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <SetSysClockTo72+0xf8>)
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <SetSysClockTo72+0xf8>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80018c2:	bf00      	nop
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <SetSysClockTo72+0xf8>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d1f9      	bne.n	80018c4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40022000 	.word	0x40022000

080018e4 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
	int div = 1;
 80018f0:	2301      	movs	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80018f4:	e004      	b.n	8001900 <ts_itoa+0x1c>
		div *= base;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	fb02 f303 	mul.w	r3, r2, r3
 80018fe:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	fbb2 f2f3 	udiv	r2, r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	429a      	cmp	r2, r3
 800190c:	d2f3      	bcs.n	80018f6 <ts_itoa+0x12>

	while (div != 0)
 800190e:	e029      	b.n	8001964 <ts_itoa+0x80>
	{
		int num = d/div;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	fbb2 f3f3 	udiv	r3, r2, r3
 8001918:	613b      	str	r3, [r7, #16]
		d = d%div;
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001922:	fb02 f201 	mul.w	r2, r2, r1
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	60bb      	str	r3, [r7, #8]
		div /= base;
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001932:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b09      	cmp	r3, #9
 8001938:	dd0a      	ble.n	8001950 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	1c59      	adds	r1, r3, #1
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	6011      	str	r1, [r2, #0]
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	3237      	adds	r2, #55	; 0x37
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	e009      	b.n	8001964 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	1c59      	adds	r1, r3, #1
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	6011      	str	r1, [r2, #0]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	3230      	adds	r2, #48	; 0x30
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1d2      	bne.n	8001910 <ts_itoa+0x2c>
	}
}
 800196a:	bf00      	nop
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8001984:	e07d      	b.n	8001a82 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b25      	cmp	r3, #37	; 0x25
 800198c:	d171      	bne.n	8001a72 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	3301      	adds	r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b64      	cmp	r3, #100	; 0x64
 800199a:	d01e      	beq.n	80019da <ts_formatstring+0x66>
 800199c:	2b64      	cmp	r3, #100	; 0x64
 800199e:	dc06      	bgt.n	80019ae <ts_formatstring+0x3a>
 80019a0:	2b58      	cmp	r3, #88	; 0x58
 80019a2:	d050      	beq.n	8001a46 <ts_formatstring+0xd2>
 80019a4:	2b63      	cmp	r3, #99	; 0x63
 80019a6:	d00e      	beq.n	80019c6 <ts_formatstring+0x52>
 80019a8:	2b25      	cmp	r3, #37	; 0x25
 80019aa:	d058      	beq.n	8001a5e <ts_formatstring+0xea>
 80019ac:	e05d      	b.n	8001a6a <ts_formatstring+0xf6>
 80019ae:	2b73      	cmp	r3, #115	; 0x73
 80019b0:	d02b      	beq.n	8001a0a <ts_formatstring+0x96>
 80019b2:	2b73      	cmp	r3, #115	; 0x73
 80019b4:	dc02      	bgt.n	80019bc <ts_formatstring+0x48>
 80019b6:	2b69      	cmp	r3, #105	; 0x69
 80019b8:	d00f      	beq.n	80019da <ts_formatstring+0x66>
 80019ba:	e056      	b.n	8001a6a <ts_formatstring+0xf6>
 80019bc:	2b75      	cmp	r3, #117	; 0x75
 80019be:	d037      	beq.n	8001a30 <ts_formatstring+0xbc>
 80019c0:	2b78      	cmp	r3, #120	; 0x78
 80019c2:	d040      	beq.n	8001a46 <ts_formatstring+0xd2>
 80019c4:	e051      	b.n	8001a6a <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	60fa      	str	r2, [r7, #12]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	1d11      	adds	r1, r2, #4
 80019d0:	6079      	str	r1, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	701a      	strb	r2, [r3, #0]
				break;
 80019d8:	e047      	b.n	8001a6a <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	1d1a      	adds	r2, r3, #4
 80019de:	607a      	str	r2, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	da07      	bge.n	80019fa <ts_formatstring+0x86>
					{
						val *= -1;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	425b      	negs	r3, r3
 80019ee:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	60fa      	str	r2, [r7, #12]
 80019f6:	222d      	movs	r2, #45	; 0x2d
 80019f8:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80019fa:	69f9      	ldr	r1, [r7, #28]
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	220a      	movs	r2, #10
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff6e 	bl	80018e4 <ts_itoa>
				}
				break;
 8001a08:	e02f      	b.n	8001a6a <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	1d1a      	adds	r2, r3, #4
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8001a14:	e007      	b.n	8001a26 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	60fa      	str	r2, [r7, #12]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	1c51      	adds	r1, r2, #1
 8001a20:	61b9      	str	r1, [r7, #24]
 8001a22:	7812      	ldrb	r2, [r2, #0]
 8001a24:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f3      	bne.n	8001a16 <ts_formatstring+0xa2>
					}
				}
				break;
 8001a2e:	e01c      	b.n	8001a6a <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	1d1a      	adds	r2, r3, #4
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	6819      	ldr	r1, [r3, #0]
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	220a      	movs	r2, #10
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff50 	bl	80018e4 <ts_itoa>
				break;
 8001a44:	e011      	b.n	8001a6a <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	1d1a      	adds	r2, r3, #4
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2210      	movs	r2, #16
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ff44 	bl	80018e4 <ts_itoa>
				break;
 8001a5c:	e005      	b.n	8001a6a <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	60fa      	str	r2, [r7, #12]
 8001a64:	2225      	movs	r2, #37	; 0x25
 8001a66:	701a      	strb	r2, [r3, #0]
				  break;
 8001a68:	bf00      	nop
			}
			fmt++;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	e007      	b.n	8001a82 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	60fa      	str	r2, [r7, #12]
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	1c51      	adds	r1, r2, #1
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	7812      	ldrb	r2, [r2, #0]
 8001a80:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f47f af7d 	bne.w	8001986 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	461a      	mov	r2, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	1ad3      	subs	r3, r2, r3
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3720      	adds	r7, #32
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
	int length = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8001ab2:	e081      	b.n	8001bb8 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b25      	cmp	r3, #37	; 0x25
 8001aba:	d177      	bne.n	8001bac <ts_formatlength+0x108>
		{
			++fmt;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	3b58      	subs	r3, #88	; 0x58
 8001ac8:	2b20      	cmp	r3, #32
 8001aca:	d86a      	bhi.n	8001ba2 <ts_formatlength+0xfe>
 8001acc:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <ts_formatlength+0x30>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001b95 	.word	0x08001b95
 8001ad8:	08001ba3 	.word	0x08001ba3
 8001adc:	08001ba3 	.word	0x08001ba3
 8001ae0:	08001ba3 	.word	0x08001ba3
 8001ae4:	08001ba3 	.word	0x08001ba3
 8001ae8:	08001ba3 	.word	0x08001ba3
 8001aec:	08001ba3 	.word	0x08001ba3
 8001af0:	08001ba3 	.word	0x08001ba3
 8001af4:	08001ba3 	.word	0x08001ba3
 8001af8:	08001ba3 	.word	0x08001ba3
 8001afc:	08001ba3 	.word	0x08001ba3
 8001b00:	08001b59 	.word	0x08001b59
 8001b04:	08001b67 	.word	0x08001b67
 8001b08:	08001ba3 	.word	0x08001ba3
 8001b0c:	08001ba3 	.word	0x08001ba3
 8001b10:	08001ba3 	.word	0x08001ba3
 8001b14:	08001ba3 	.word	0x08001ba3
 8001b18:	08001b67 	.word	0x08001b67
 8001b1c:	08001ba3 	.word	0x08001ba3
 8001b20:	08001ba3 	.word	0x08001ba3
 8001b24:	08001ba3 	.word	0x08001ba3
 8001b28:	08001ba3 	.word	0x08001ba3
 8001b2c:	08001ba3 	.word	0x08001ba3
 8001b30:	08001ba3 	.word	0x08001ba3
 8001b34:	08001ba3 	.word	0x08001ba3
 8001b38:	08001ba3 	.word	0x08001ba3
 8001b3c:	08001ba3 	.word	0x08001ba3
 8001b40:	08001b75 	.word	0x08001b75
 8001b44:	08001ba3 	.word	0x08001ba3
 8001b48:	08001b67 	.word	0x08001b67
 8001b4c:	08001ba3 	.word	0x08001ba3
 8001b50:	08001ba3 	.word	0x08001ba3
 8001b54:	08001b95 	.word	0x08001b95
			{
			  case 'c':
		  		  va_arg(va, int);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	603b      	str	r3, [r7, #0]
				  ++length;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3301      	adds	r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
				  break;
 8001b64:	e025      	b.n	8001bb2 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	330b      	adds	r3, #11
 8001b6a:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	603b      	str	r3, [r7, #0]
				  break;
 8001b72:	e01e      	b.n	8001bb2 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	1d1a      	adds	r2, r3, #4
 8001b78:	603a      	str	r2, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8001b7e:	e002      	b.n	8001b86 <ts_formatlength+0xe2>
			  			  ++length;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3301      	adds	r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	60ba      	str	r2, [r7, #8]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f6      	bne.n	8001b80 <ts_formatlength+0xdc>
			  	  }
				  break;
 8001b92:	e00e      	b.n	8001bb2 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3308      	adds	r3, #8
 8001b98:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	603b      	str	r3, [r7, #0]
				  break;
 8001ba0:	e007      	b.n	8001bb2 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
				  break;
 8001ba8:	bf00      	nop
 8001baa:	e002      	b.n	8001bb2 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f47f af79 	bne.w	8001ab4 <ts_formatlength+0x10>
	}
	return length;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop

08001bd0 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8001bd0:	b40f      	push	{r0, r1, r2, r3}
 8001bd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
	int length = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8001bde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001be2:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8001be4:	6839      	ldr	r1, [r7, #0]
 8001be6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001be8:	f7ff ff5c 	bl	8001aa4 <ts_formatlength>
 8001bec:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8001bee:	466b      	mov	r3, sp
 8001bf0:	461e      	mov	r6, r3
		char buf[length];
 8001bf2:	68f9      	ldr	r1, [r7, #12]
 8001bf4:	1e4b      	subs	r3, r1, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8001c04:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8001c08:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	00dd      	lsls	r5, r3, #3
 8001c16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001c1a:	00d4      	lsls	r4, r2, #3
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	3307      	adds	r3, #7
 8001c20:	08db      	lsrs	r3, r3, #3
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	ebad 0d03 	sub.w	sp, sp, r3
 8001c28:	466b      	mov	r3, sp
 8001c2a:	3300      	adds	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8001c2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c32:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fe9a 	bl	8001974 <ts_formatstring>
 8001c40:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4619      	mov	r1, r3
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f000 f84b 	bl	8001ce4 <_write>
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c5e:	b004      	add	sp, #16
 8001c60:	4770      	bx	lr
	...

08001c64 <initUart>:
#include <uart.h>

void initUart(void)
 {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 	USART_InitTypeDef usartinit;
 	GPIO_InitTypeDef gpio;
    GPIO_StructInit(&gpio);
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe ff1d 	bl	8000aac <GPIO_StructInit>
 	gpio.GPIO_Pin = USART_TX_PIN; //TX
 8001c72:	2340      	movs	r3, #64	; 0x40
 8001c74:	80bb      	strh	r3, [r7, #4]
 	gpio.GPIO_Mode = GPIO_Mode_AF_PP;
 8001c76:	2318      	movs	r3, #24
 8001c78:	71fb      	strb	r3, [r7, #7]
 	gpio.GPIO_Speed = GPIO_Speed_50MHz;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	71bb      	strb	r3, [r7, #6]
 	GPIO_Init(USART_PORT, &gpio);
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	4619      	mov	r1, r3
 8001c82:	4816      	ldr	r0, [pc, #88]	; (8001cdc <initUart+0x78>)
 8001c84:	f7fe fe56 	bl	8000934 <GPIO_Init>
 	gpio.GPIO_Pin = USART_RX_PIN; //RX
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	80bb      	strh	r3, [r7, #4]
 	gpio.GPIO_Mode = GPIO_Mode_IPU;
 8001c8c:	2348      	movs	r3, #72	; 0x48
 8001c8e:	71fb      	strb	r3, [r7, #7]
 	GPIO_Init(USART_PORT, &gpio);
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4811      	ldr	r0, [pc, #68]	; (8001cdc <initUart+0x78>)
 8001c96:	f7fe fe4d 	bl	8000934 <GPIO_Init>

 	USART_StructInit(&usartinit);
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f980 	bl	8000fa4 <USART_StructInit>
 	usartinit.USART_BaudRate = 115200;
 8001ca4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ca8:	60bb      	str	r3, [r7, #8]
 	usartinit.USART_WordLength = USART_WordLength_8b;
 8001caa:	2300      	movs	r3, #0
 8001cac:	81bb      	strh	r3, [r7, #12]
 	usartinit.USART_StopBits = USART_StopBits_1;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	81fb      	strh	r3, [r7, #14]
 	usartinit.USART_Parity = USART_Parity_No;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	823b      	strh	r3, [r7, #16]
 	usartinit.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001cb6:	230c      	movs	r3, #12
 8001cb8:	827b      	strh	r3, [r7, #18]
 	usartinit.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	82bb      	strh	r3, [r7, #20]
 	USART_Init(USART_ID, &usartinit);
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4806      	ldr	r0, [pc, #24]	; (8001ce0 <initUart+0x7c>)
 8001cc6:	f7ff f8b3 	bl	8000e30 <USART_Init>
 	USART_Cmd(USART_ID, ENABLE);
 8001cca:	2101      	movs	r1, #1
 8001ccc:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <initUart+0x7c>)
 8001cce:	f7ff f985 	bl	8000fdc <USART_Cmd>
 }
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40010c00 	.word	0x40010c00
 8001ce0:	40013800 	.word	0x40013800

08001ce4 <_write>:


int _write(int fd, char *str, int len)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
	(void)fd;
	uint32_t i;
	for( i = 0; i < len; i++){
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	e013      	b.n	8001d1e <_write+0x3a>
    	while (USART_GetFlagStatus(USART_ID, USART_FLAG_TXE) == RESET);
 8001cf6:	bf00      	nop
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	480d      	ldr	r0, [pc, #52]	; (8001d30 <_write+0x4c>)
 8001cfc:	f7ff f99e 	bl	800103c <USART_GetFlagStatus>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f8      	beq.n	8001cf8 <_write+0x14>
    	USART_SendData(USART_ID, (uint16_t) (str[i]));
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	4619      	mov	r1, r3
 8001d12:	4807      	ldr	r0, [pc, #28]	; (8001d30 <_write+0x4c>)
 8001d14:	f7ff f981 	bl	800101a <USART_SendData>
	for( i = 0; i < len; i++){
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d3e7      	bcc.n	8001cf6 <_write+0x12>
    }
	return 0;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40013800 	.word	0x40013800

08001d34 <__libc_init_array>:
 8001d34:	b570      	push	{r4, r5, r6, lr}
 8001d36:	2500      	movs	r5, #0
 8001d38:	4e0c      	ldr	r6, [pc, #48]	; (8001d6c <__libc_init_array+0x38>)
 8001d3a:	4c0d      	ldr	r4, [pc, #52]	; (8001d70 <__libc_init_array+0x3c>)
 8001d3c:	1ba4      	subs	r4, r4, r6
 8001d3e:	10a4      	asrs	r4, r4, #2
 8001d40:	42a5      	cmp	r5, r4
 8001d42:	d109      	bne.n	8001d58 <__libc_init_array+0x24>
 8001d44:	f000 f81a 	bl	8001d7c <_init>
 8001d48:	2500      	movs	r5, #0
 8001d4a:	4e0a      	ldr	r6, [pc, #40]	; (8001d74 <__libc_init_array+0x40>)
 8001d4c:	4c0a      	ldr	r4, [pc, #40]	; (8001d78 <__libc_init_array+0x44>)
 8001d4e:	1ba4      	subs	r4, r4, r6
 8001d50:	10a4      	asrs	r4, r4, #2
 8001d52:	42a5      	cmp	r5, r4
 8001d54:	d105      	bne.n	8001d62 <__libc_init_array+0x2e>
 8001d56:	bd70      	pop	{r4, r5, r6, pc}
 8001d58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d5c:	4798      	blx	r3
 8001d5e:	3501      	adds	r5, #1
 8001d60:	e7ee      	b.n	8001d40 <__libc_init_array+0xc>
 8001d62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d66:	4798      	blx	r3
 8001d68:	3501      	adds	r5, #1
 8001d6a:	e7f2      	b.n	8001d52 <__libc_init_array+0x1e>
 8001d6c:	08001dc0 	.word	0x08001dc0
 8001d70:	08001dc0 	.word	0x08001dc0
 8001d74:	08001dc0 	.word	0x08001dc0
 8001d78:	08001dc4 	.word	0x08001dc4

08001d7c <_init>:
 8001d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7e:	bf00      	nop
 8001d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d82:	bc08      	pop	{r3}
 8001d84:	469e      	mov	lr, r3
 8001d86:	4770      	bx	lr

08001d88 <_fini>:
 8001d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8a:	bf00      	nop
 8001d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d8e:	bc08      	pop	{r3}
 8001d90:	469e      	mov	lr, r3
 8001d92:	4770      	bx	lr
